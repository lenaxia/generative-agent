name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run black (code formatting check)
      run: black --check --diff .
      
    - name: Run isort (import sorting check)
      run: isort --check-only --diff .
      
    - name: Run flake8 (style guide enforcement)
      run: flake8 .
      
    - name: Run mypy (static type checking)
      run: mypy .
      continue-on-error: true  # Allow mypy failures initially
      
    - name: Run pylint (comprehensive code analysis)
      run: pylint llm_provider/ supervisor/ common/ config/
      continue-on-error: true  # Allow pylint failures initially
      
    - name: Run bandit (security scan)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run yamllint (YAML linting)
      run: yamllint .
      
    - name: Upload bandit security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        timeout 600 python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --timeout=300
        
    - name: Run integration tests
      run: |
        timeout 900 python -m pytest tests/integration/ -v --timeout=300
        
    - name: Run LLM provider tests
      run: |
        timeout 900 python -m pytest tests/llm_provider/ -v --timeout=300
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Safety check for known security vulnerabilities
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
      continue-on-error: true
      
    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-security-report
        path: safety-report.json

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run performance benchmarks
      run: |
        timeout 1200 python -m pytest tests/ -k "benchmark" --benchmark-json=benchmark.json --timeout=300
        
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-audit
      run: pip install pip-audit
      
    - name: Run pip-audit
      run: pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json
      continue-on-error: true
      
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  build-and-validate:
    name: Build & Validate Package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package with twine
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  integration-health-check:
    name: Integration Health Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run system health check
      run: |
        timeout 300 python -c "
        print('üß™ System Health Check')
        print('=' * 30)
        
        # Test core component initialization
        from llm_provider.role_registry import RoleRegistry
        registry = RoleRegistry('roles')
        print('‚úÖ RoleRegistry initialized')
        
        from llm_provider.universal_agent import UniversalAgent
        from llm_provider.factory import LLMFactory
        from unittest.mock import Mock
        
        llm_factory = Mock()
        agent = UniversalAgent(llm_factory, registry)
        print('‚úÖ UniversalAgent initialized')
        
        print('üéâ All systems operational!')
        "

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-validate]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.lint-and-format.result == 'success' && needs.test.result == 'success' }}
      run: echo "‚úÖ All checks passed successfully!"
      
    - name: Notify failure
      if: ${{ needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed:"
        echo "Linting: ${{ needs.lint-and-format.result }}"
        echo "Tests: ${{ needs.test.result }}"
        exit 1