name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run black (code formatting check)
        run: black --check --diff .
        continue-on-error: true

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .
        continue-on-error: true

      - name: Run flake8 (style guide enforcement)
        run: flake8 .
        continue-on-error: true

      - name: Run yamllint (YAML linting)
        run: yamllint .
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          timeout 600 python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --timeout=300
        continue-on-error: true

      - name: Run integration tests
        run: |
          timeout 900 python -m pytest tests/integration/ -v --timeout=300
        continue-on-error: true

      - name: Run LLM provider tests
        run: |
          timeout 900 python -m pytest tests/llm_provider/ -v --timeout=300
        continue-on-error: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Run Safety check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            safety-report.json

  build-and-validate:
    name: Build & Validate Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages-${{ github.run_id }}
          path: dist/

  integration-health-check:
    name: Integration Health Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run system health check
        run: |
          timeout 300 python -c "
          print('üß™ System Health Check')
          print('=' * 30)

          # Test core component initialization
          try:
              from llm_provider.role_registry import RoleRegistry
              registry = RoleRegistry('roles')
              print('‚úÖ RoleRegistry initialized')
          except Exception as e:
              print('‚ùå RoleRegistry failed:', e)

          try:
              from llm_provider.universal_agent import UniversalAgent
              from llm_provider.factory import LLMFactory
              from unittest.mock import Mock

              llm_factory = Mock()
              agent = UniversalAgent(llm_factory, registry)
              print('‚úÖ UniversalAgent initialized')
          except Exception as e:
              print('‚ùå UniversalAgent failed:', e)

          print('üéâ Health check completed!')
          "

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-validate]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.lint-and-format.result == 'success' && needs.test.result == 'success' }}
        run: echo "‚úÖ All checks passed successfully!"

      - name: Notify partial success
        if: ${{ needs.lint-and-format.result != 'failure' && needs.test.result != 'failure' }}
        run: |
          echo "‚ö†Ô∏è Build completed with warnings:"
          echo "Linting: ${{ needs.lint-and-format.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Build: ${{ needs.build-and-validate.result }}"

      - name: Notify failure
        if: ${{ needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          echo "‚ùå Some checks failed:"
          echo "Linting: ${{ needs.lint-and-format.result }}"
          echo "Tests: ${{ needs.test.result }}"
          exit 1
